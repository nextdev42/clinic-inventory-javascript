<!DOCTYPE html>
<html lang="sw">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sajili Matumizi ya Dawa</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
  <style>
    :root {
      --primary: #2563eb;
      --primary-hover: #1d4ed8;
      --primary-light: #dbeafe;
      --secondary: #f0f9ff;
      --success: #16a34a;
      --warning: #ea580c;
      --danger: #dc2626;
      --gray-50: #f9fafb;
      --gray-100: #f3f4f6;
      --gray-200: #e5e7eb;
      --gray-300: #d1d5db;
      --gray-400: #9ca3af;
      --gray-500: #6b7280;
      --gray-600: #4b5563;
      --gray-700: #374151;
      --gray-800: #1f2937;
      --gray-900: #111827;
      --white: #ffffff;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background-color: var(--gray-50);
      color: var(--gray-800);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      line-height: 1.5;
      min-height: 100vh;
    }

    .container {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    /* Header Styles */
    header {
      background-color: var(--primary);
      color: var(--white);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      padding: 1rem 0;
      margin-bottom: 2rem;
    }

    .header-content {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .header-title {
      font-size: 1.5rem;
      font-weight: 700;
      display: flex;
      align-items: center;
    }

    .header-title i {
      margin-right: 0.75rem;
    }

    /* Form Styles */
    .form-container {
      max-width: 600px;
      margin: 0 auto;
      background-color: var(--white);
      border-radius: 0.5rem;
      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      padding: 2rem;
    }

    .form-title {
      text-align: center;
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 1.5rem;
      color: var(--gray-800);
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--gray-700);
      margin-bottom: 0.5rem;
    }

    .form-select {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--gray-300);
      border-radius: 0.375rem;
      font-size: 0.875rem;
      background-color: var(--white);
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%236b7280' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 16px 12px;
    }

    .form-select:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 2px var(--primary-light);
    }

    /* Medicine Items */
    .medicine-list {
      margin-top: 1.5rem;
    }

    .section-title {
      font-size: 1rem;
      font-weight: 600;
      color: var(--gray-800);
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--gray-200);
    }

    .medicine-item {
      display: flex;
      align-items: center;
      padding: 1rem;
      margin-bottom: 0.75rem;
      background-color: var(--gray-50);
      border-radius: 0.375rem;
      border: 1px solid var(--gray-200);
      transition: all 0.2s;
    }

    .medicine-item.selected {
      border-color: var(--primary);
      background-color: var(--primary-light);
    }

    .medicine-checkbox {
      margin-right: 1rem;
      width: 20px;
      height: 20px;
      cursor: pointer;
    }

    .medicine-info {
      flex-grow: 1;
      font-size: 0.875rem;
    }

    .medicine-name {
      font-weight: 500;
      color: var(--gray-800);
    }

    .medicine-stock {
      color: var(--gray-500);
      font-size: 0.75rem;
    }

    .medicine-quantity {
      display: flex;
      align-items: center;
      margin-left: 1rem;
    }

    .quantity-label {
      font-size: 0.75rem;
      color: var(--gray-600);
      margin-right: 0.5rem;
    }

    .quantity-input {
      width: 80px;
      padding: 0.5rem;
      border: 1px solid var(--gray-300);
      border-radius: 0.25rem;
      text-align: center;
      font-size: 0.875rem;
    }

    .quantity-input:disabled {
      background-color: var(--gray-100);
      cursor: not-allowed;
    }

    /* Form Buttons */
    .form-actions {
      display: flex;
      justify-content: space-between;
      margin-top: 2rem;
    }

    .btn {
      padding: 0.75rem 1.5rem;
      border-radius: 0.375rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn-primary {
      background-color: var(--primary);
      color: var(--white);
      border: none;
    }

    .btn-primary:hover {
      background-color: var(--primary-hover);
    }

    .btn-secondary {
      background-color: var(--gray-200);
      color: var(--gray-800);
      border: none;
    }

    .btn-secondary:hover {
      background-color: var(--gray-300);
    }

    .btn i {
      margin-right: 0.5rem;
    }

    /* Error States */
    .error-message {
      color: var(--danger);
      font-size: 0.875rem;
      margin-top: 0.5rem;
      text-align: center;
    }

    .input-error { /* Renamed from .has-error for clarity on inputs */
      border-color: var(--danger) !important;
      box-shadow: 0 0 0 2px var(--danger); /* Add a subtle shadow for better visibility */
    }

    .form-error-summary { /* New class for the main form error */
      color: var(--danger);
      font-size: 0.875rem;
      margin-top: 1rem;
      text-align: center;
      padding: 0.75rem 1rem;
      background-color: var(--danger); /* A light red background */
      color: var(--white); /* White text for contrast */
      border-radius: 0.375rem;
      margin-bottom: 1.5rem; /* Space below the summary */
    }
  </style>
</head>
<body>
  <header>
    <div class="container header-content">
      <h1 class="header-title">
        <i class="fas fa-pills"></i> Sajili Matumizi ya Dawa
      </h1>
    </div>
  </header>

  <main class="container">
    <div id="form-error-summary" class="form-error-summary" role="alert" aria-live="polite">
      <% if (error) { %>
        <i class="fas fa-exclamation-circle"></i> <%= error %>
      <% } %>
    </div>

    <div class="form-container">
      <form method="POST" action="/matumizi/sajili" novalidate>
        <div class="form-group">
          <label for="mtumiaji" class="form-label">Chagua Mtumiaji:</label>
          <select name="mtumiajiId" id="mtumiaji" class="form-select" required aria-describedby="mtumiaji-error">
            <option value="">-- Chagua mtumiaji --</option>
            <% watumiaji.forEach(m => { %>
              <option value="<%= m.id %>" <%= m.id == mtumiajiId ? 'selected' : '' %>>
                <%= m.jina %> - <%= m.maelezo || '' %>
              </option>
            <% }) %>
          </select>
          <div id="mtumiaji-error" class="error-message" aria-live="polite"></div>
        </div>

        <div class="medicine-list">
          <h3 class="section-title">Chagua Dawa na Kiasi</h3>
          <div id="medicine-list-error" class="error-message" aria-live="polite"></div>

          <% dawa.forEach((d, index) => { %>
            <div class="medicine-item" id="medicine-item-<%= index %>">
              <input type="checkbox"
                     name="dawaList[<%= index %>][confirmed]"
                     value="true"
                     class="medicine-checkbox"
                     data-index="<%= index %>"
                     id="checkbox-<%= index %>"
                     aria-labelledby="medicine-name-<%= index %>"
                     aria-controls="kiasi-<%= index %>">

              <div class="medicine-info">
                <div class="medicine-name" id="medicine-name-<%= index %>"><%= d.jina %></div>
                <div class="medicine-stock">Hisa: <span id="medicine-stock-<%= index %>"><%= d.kiasi %></span></div>
              </div>

              <input type="hidden" name="dawaList[<%= index %>][id]" value="<%= d.id %>">

              <div class="medicine-quantity">
                <label for="kiasi-<%= index %>" class="quantity-label">Kiasi:</label>
                <input type="number"
                       name="dawaList[<%= index %>][kiasi]"
                       placeholder="0"
                       min="1"
                       max="<%= d.kiasi %>"
                       class="quantity-input"
                       id="kiasi-<%= index %>"
                       disabled
                       aria-labelledby="medicine-name-<%= index %> quantity-label-<%= index %>"
                       aria-describedby="kiasi-error-<%= index %>">
              </div>

              <div id="kiasi-error-<%= index %>" class="error-message" aria-live="polite"></div>
            </div>
          <% }) %>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-primary" id="submit-button">
            <i class="fas fa-save"></i> Hifadhi Matumizi
          </button>
          <a href="/" class="btn btn-secondary">
            <i class="fas fa-times"></i> Ghairi
          </a>
        </div>
      </form>
    </div>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const form = document.querySelector('form');
      const submitButton = document.getElementById('submit-button');
      const mtumiajiSelect = document.getElementById('mtumiaji');
      const mtumiajiErrorDiv = document.getElementById('mtumiaji-error');
      const medicineListErrorDiv = document.getElementById('medicine-list-error');
      const formErrorSummaryDiv = document.getElementById('form-error-summary');
      const checkboxes = document.querySelectorAll('.medicine-checkbox');

      // Function to clear all individual medicine item errors
      function clearMedicineErrors() {
        checkboxes.forEach(cb => {
          const index = cb.dataset.index;
          const medicineItem = document.getElementById(`medicine-item-${index}`);
          const quantityInput = document.getElementById(`kiasi-${index}`);
          const quantityErrorDiv = document.getElementById(`kiasi-error-${index}`);

          medicineItem.classList.remove('input-error'); // Updated class name
          quantityInput.classList.remove('input-error'); // Apply error to input directly
          if (quantityErrorDiv) quantityErrorDiv.innerText = '';
        });
      }

      // Initialize quantity inputs based on checkbox state on page load
      checkboxes.forEach(cb => {
        const index = cb.dataset.index;
        const quantityInput = document.getElementById(`kiasi-${index}`);
        const medicineItem = document.getElementById(`medicine-item-${index}`);
        const quantityErrorDiv = document.getElementById(`kiasi-error-${index}`);

        // Set initial state for quantity input and item selection
        if (cb.checked) {
          quantityInput.disabled = false;
          medicineItem.classList.add('selected');
        } else {
          quantityInput.disabled = true;
          // Ensure value is cleared if not checked
          quantityInput.value = "";
          medicineItem.classList.remove('selected');
          medicineItem.classList.remove('input-error'); // Clear potential server-side error
          quantityInput.classList.remove('input-error');
          if (quantityErrorDiv) quantityErrorDiv.innerText = '';
        }

        cb.addEventListener('change', () => {
          if (cb.checked) {
            quantityInput.disabled = false;
            quantityInput.focus();
            medicineItem.classList.add('selected');
            // Clear specific error when checked
            medicineItem.classList.remove('input-error');
            quantityInput.classList.remove('input-error');
            if (quantityErrorDiv) quantityErrorDiv.innerText = '';
          } else {
            quantityInput.disabled = true;
            quantityInput.value = ""; // Always clear value when unchecked
            medicineItem.classList.remove('selected');
            medicineItem.classList.remove('input-error'); // Clear specific error when unchecked
            quantityInput.classList.remove('input-error');
            if (quantityErrorDiv) quantityErrorDiv.innerText = '';
          }
        });

        quantityInput.addEventListener('input', () => {
          if (cb.checked) {
            const value = quantityInput.value.trim();
            const max = parseInt(quantityInput.max);
            const num = parseInt(value);
            const medicineName = document.getElementById(`medicine-name-${index}`).textContent;

            // Clear previous error
            medicineItem.classList.remove('input-error');
            quantityInput.classList.remove('input-error');
            if (quantityErrorDiv) quantityErrorDiv.innerText = '';

            if (value === "") {
                // Allow empty input if it's not required (handled by form submission validation)
                // This state will be caught by the submit handler
            } else if (isNaN(num) || num < 1 || num > max) {
              medicineItem.classList.add('input-error');
              quantityInput.classList.add('input-error');
              quantityErrorDiv.innerText = `Kiasi cha ${medicineName} kinapaswa kuwa kati ya 1 na ${max}.`;
            }
          }
        });
      });

      // Clear server-side errors on first interaction
      mtumiajiSelect.addEventListener('change', () => {
        mtumiajiSelect.classList.remove('input-error');
        mtumiajiErrorDiv.innerText = '';
        // Clear overall summary if this was the only issue
        if (!mtumiajiSelect.value && medicineListErrorDiv.innerText === '') {
          formErrorSummaryDiv.innerText = '';
          formErrorSummaryDiv.style.display = 'none';
        }
      });

      // Clear the main form error summary when user starts making changes, but only if it's not a server-side error
      form.addEventListener('input', () => {
        // If the server-side error was set, we might keep it until a full successful validation.
        // For now, let's clear all client-side related summary errors.
        formErrorSummaryDiv.innerText = formErrorSummaryDiv.dataset.serverError ? formErrorSummaryDiv.innerText : '';
        if (!formErrorSummaryDiv.dataset.serverError) {
          formErrorSummaryDiv.style.display = 'none';
        }
      });

      // Form validation on submit
      form.addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent default submission initially
        let formIsValid = true;
        let atLeastOneDawaSelectedAndValid = false;
        let selectedDawaCount = 0;

        // Reset all error displays
        mtumiajiErrorDiv.innerText = '';
        medicineListErrorDiv.innerText = '';
        formErrorSummaryDiv.innerText = '';
        formErrorSummaryDiv.style.display = 'none';
        mtumiajiSelect.classList.remove('input-error');
        clearMedicineErrors(); // Clear all specific medicine errors

        const errors = []; // Array to collect all error messages

        // 1. Validate Mtumiaji selection
        if (mtumiajiSelect.value === "") {
          mtumiajiSelect.classList.add('input-error');
          mtumiajiErrorDiv.innerText = "Tafadhali chagua mtumiaji.";
          errors.push("Tafadhali chagua mtumiaji.");
          formIsValid = false;
        }

        // 2. Validate each checked drug
        checkboxes.forEach(cb => {
          const index = cb.dataset.index;
          const quantityInput = document.getElementById(`kiasi-${index}`);
          const medicineItem = document.getElementById(`medicine-item-${index}`);
          const quantityErrorDiv = document.getElementById(`kiasi-error-${index}`);
          const medicineName = document.getElementById(`medicine-name-${index}`).textContent;
          const maxStock = parseInt(quantityInput.max);

          if (cb.checked) {
            selectedDawaCount++;
            const value = quantityInput.value.trim();
            const num = parseInt(value);

            // Check if quantity is empty or invalid
            if (value === "") {
              medicineItem.classList.add('input-error');
              quantityInput.classList.add('input-error');
              quantityErrorDiv.innerText = `Tafadhali jaza kiasi cha ${medicineName}.`;
              errors.push(`Kiasi kinakosekana kwa dawa ya "${medicineName}".`);
              formIsValid = false;
            } else if (isNaN(num) || num < 1 || num > maxStock) {
              medicineItem.classList.add('input-error');
              quantityInput.classList.add('input-error');
              quantityErrorDiv.innerText = `Kiasi cha ${medicineName} kinapaswa kuwa kati ya 1 na ${maxStock}.`;
              errors.push(`Kiasi cha "${medicineName}" ni batili (kati ya 1 na ${maxStock}).`);
              formIsValid = false;
            } else {
              // Valid drug selected with a valid quantity
              atLeastOneDawaSelectedAndValid = true;
              medicineItem.classList.remove('input-error');
              quantityInput.classList.remove('input-error');
              quantityErrorDiv.innerText = '';
            }
          }
        });

        // 3. Overall medicine list validation (at least one valid drug selected)
        if (selectedDawaCount === 0) {
            medicineListErrorDiv.innerText = "Tafadhali chagua angalau dawa moja ya kutumia.";
            errors.push("Tafadhali chagua angalau dawa moja ya kutumia.");
            formIsValid = false;
        } else if (!atLeastOneDawaSelectedAndValid && selectedDawaCount > 0) {
            // This case means drugs were selected, but none had valid quantities
            // Specific errors for each drug would have been added above.
            // No additional generic error needed here as specific ones are better.
        }


        // Display cumulative errors in the form error summary
        if (!formIsValid) {
          formErrorSummaryDiv.innerHTML = '<i class="fas fa-exclamation-circle"></i> Tafadhali rekebisha makosa yafuatayo:<br>' + errors.map(msg => `&bull; ${msg}`).join('<br>');
          formErrorSummaryDiv.style.display = 'block';
          // Scroll to the top of the form or the first error
          mtumiajiSelect.scrollIntoView({ behavior: 'smooth', block: 'center' });
          submitButton.disabled = false; // Re-enable if it was disabled
        } else {
          // If all client-side checks pass, submit the form
          submitButton.disabled = true; // Prevent double submission
          form.submit();
        }
      });
    });
  </script>
</body>
</html>
